name: Build PR
on:
  pull_request:

jobs:
  # build-desktop:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-latest, ubuntu-20.04]
  #   name: Build Desktop App
  #   steps:
  #     - name: Check out Git repository
  #       uses: actions/checkout@v2

  #     - name: Install Node.js, NPM and Yarn
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 14

  #     - name: Get npm cache directory
  #       id: npm-cache-dir
  #       run: |
  #         echo "::set-output name=dir::$(npm config get cache)"

  #     - uses: actions/cache@v2
  #       id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
  #       with:
  #         path: ${{ steps.npm-cache-dir.outputs.dir }}
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-

  #     - name: build desktop
  #       run: |
  #         node -v
  #         npm -v
  #         npm config set -g production false
  #         npm i -g @ionic/cli
  #         npm install --prefix packages/desktop
  #         make build-desktop

  build-windows:
    name: "Build Windows Desktop App"
    runs-on: "windows-latest"
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build Desktop App
        shell: powershell
        env:
          BROWSERSLIST: last 3 electron versions
        run: |
          node -v
          npm -v
          npm install --global node-gyp@latest node-gyp-build@latest
          node-gyp -v
          npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}
          npm install --global --production windows-build-tools --vs2015
          npm config set -g production false
          npm i -g @ionic/cli
          npm install --prefix packages/desktop
          sed -i '/^  loadConfig: function loadConfig.*/a console.log(opts)' packages/desktop/node_modules/browserslist/node.js
          make build-desktop

  # build-android:
  #   name: "Build Android App"
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #   - name: Check out Git repository
  #     uses: actions/checkout@v2

  #   - name: Install Node.js, NPM and Yarn
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: 14

  #   - name: build Android App
  #     run: |
  #       npm config set -g production false
  #       npm i -g @ionic/cli
  #       npm install --prefix packages/clicker
  #       make build-android

  # build-docs:
  #   name: "Build Docs"
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: true
  #         fetch-depth: 0
  #     - name: Setup Hugo
  #       uses: peaceiris/actions-hugo@v2
  #       with:
  #         hugo-version: '0.75.1'
  #         extended: true

  #     - name: Build
  #       run: cd documentation && hugo --minify --theme book
