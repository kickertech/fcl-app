name: Create Release
on:
  push:
    tags:
      - "v*"

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: fcl-desktop ${{ github.ref }}

  build_release:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        include:
          - os: ubuntu-20.04
            asset_name: fcl-desktop.AppImage
          - os: macos-latest
            asset_name: fcl-desktop.dmg
          - os: windows-latest
            asset_name: fcl-desktop.exe

    name: Upload Release Asset
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: prepare windows environment
        shell: powershell
        if: matrix.os == 'windows-latest'
        run: |
          npm install --global node-gyp@latest node-gyp-build@latest
          npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}
          npm install --global --production windows-build-tools --vs2015

      - name: build desktop
        env:
          BROWSERSLIST: last 3 electron versions
        run: |
          node -v
          npm -v
          npm config set -g production false
          npm i -g @ionic/cli
          npm install --prefix packages/desktop
          make build-desktop

      - name: Upload Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: packages/desktop/dist_electron/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  build-android:
    name: "Build Android App"
    needs: create_release
    runs-on: "ubuntu-20.04"
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Install Node.js, NPM and Yarn
      uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v2
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: build Android App
      run: |
        npm config set -g production false
        npm i -g @ionic/cli
        npm install --prefix packages/clicker
        make build-android

    - name: Upload Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: packages/clicker/android/app/build/outputs/apk/release/app-release-unsigned.apk
        asset_name: fcl-clicker.apk
        asset_content_type: application/octet-stream

  build-docs:
    name: "Build Docs"
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.79.0'
          extended: true

      - name: Build
        run: cd documentation && hugo --minify --theme book

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./documentation/public
